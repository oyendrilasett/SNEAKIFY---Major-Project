package com.example.ecom.controller;

import java.util.List;

import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.example.ecom.model.Order;
import com.example.ecom.model.OrderItem;
import com.example.ecom.services.EmailSenderService;
import com.example.ecom.services.OrderService;
import com.razorpay.RazorpayClient;

@RestController
@CrossOrigin
public class OrderController {
	@Autowired
	private OrderService orderService;
	@Autowired
    private EmailSenderService emailSenderService;

    private final String razorpayKeyId = "rzp_test_47XQ9y61FqkFKN";
    private final String razorpayKeySecret = "Uj7JJoLcTKqJTiaVqer1vZMg";
	@PostMapping("/checkout")
    public ResponseEntity<String> createOrder(@RequestBody Order order) {
        System.out.println("Received Order object: " + order.toString());
        String customerEmail = order.getEmail();
        RazorpayClient razorpay = new RazorpayClient(razorpayKeyId, razorpayKeySecret);
        
        double totalAmount = 0.0;
        for (OrderItem item : order.getItems()) {
            // Parse the price to double before adding
            totalAmount += Double.parseDouble(item.getPrice());
        }


        // Prepare order request
        JSONObject orderRequest = new JSONObject();
        orderRequest.put("amount", totalAmount * 100); // Amount should be in paise
        orderRequest.put("currency", "INR");
        orderRequest.put("receipt", "order_" + order.getId());
        orderRequest.put("payment_capture", 1); // Auto capture payment


        HttpResponse<RazorpayOrder> response = razorpay.orders.create(orderRequest);

     // Extracting the order ID from the response body
     String razorpayOrderId = null;
     if (response.statusCode() == HttpStatus.CREATED.value()) {
         razorpayOrderId = response.body().getId();
     }

     // Update order with Razorpay order ID
     order.setRazorpayOrderId(razorpayOrderId);

        String subject = "Order Confirmation";
        String body = "Thank you for your order. Track your orders from the order page of the website. ";
        emailSenderService.sendSimpleEmail(customerEmail, subject, body);
        orderService.saveOrder(order);

        return new ResponseEntity<>("Order created and email sent to " + customerEmail, HttpStatus.CREATED);
    }
	 @GetMapping("/orders")
	 public ResponseEntity<List<Order>> getAllOrders() {
	     List<Order> orders = orderService.getAllOrders();
	     return new ResponseEntity<>(orders, HttpStatus.OK);
	 }
}
